import pandas as pd
import numpy as np
import torch
from transformers import BertModel, BertTokenizer
from sklearn.metrics.pairwise import cosine_similarity
import google.generativeai as genai

# Chave de API do Google
GOOGLE_API_KEY = "Chave_gemini"

# Configurar o cliente GenAI
genai.configure(api_key=GOOGLE_API_KEY)

# Carregar o modelo pr√©-treinado
model_name = 'bert-base-uncased'  # Voc√™ pode escolher outros modelos, se desejar
tokenizer = BertTokenizer.from_pretrained(model_name)
model = BertModel.from_pretrained(model_name)

# Fun√ß√£o para obter embeddings de texto usando BERT
def get_bert_embeddings(text):
    # Tokenizar o texto e converter para IDs de tokens
    inputs = tokenizer(text, return_tensors='pt', padding=True, truncation=True)

    # Passar os IDs de tokens para o modelo BERT para obter os embeddings
    with torch.no_grad():
        outputs = model(**inputs)

    # Retornar os embeddings da √∫ltima camada oculta
    embeddings = outputs.last_hidden_state.mean(dim=1).squeeze().tolist()
    return embeddings

# Definir a fun√ß√£o gerar_e_buscar_consulta
def gerar_e_buscar_consulta(consulta, base):
    """Gera embeddings para a consulta e busca os documentos mais semelhantes."""
    consulta_embedding = get_bert_embeddings(consulta)
    base["Similaridade"] = base["Embeddings"].apply(lambda x: cosine_similarity(np.array(consulta_embedding).reshape(1, -1), np.array(x).reshape(1, -1))[0][0])
    return base.sort_values(by="Similaridade", ascending=False)

# Adicionar o DataFrame de documentos ao c√≥digo
documentos = [
    "O primeiro passo √© sempre o mais importante.",
    "A const√¢ncia √© fundamental para alcan√ßar seus objetivos.",
    "Democratizar a educa√ß√£o √© essencial para o futuro da sociedade.",
    "Flaseman √© uma homenagem a modelos de aprendizado.",
    "EMO√á√ïES AJUDAM A APRENDER.",
    "TOME NOTAS. Caderno de erros. Explorar suas fraquezas te d√° a clareza de onde se fortalecer.",
    "Richard Feynman, famoso cientista e ganhador do nobel, tinha diversas habilidades.",
    "CURVA DE ESQUECIMENTO. Flashcards e a revis√£o de acordo com um sistema de espa√ßamento.",
    "ENSINAR √â APRENDER. A t√©cnica de estudos elaborada por Feynman.",
    "Relat√≥rio de aprendizado ao final de cada conversa.",
]

embeddings_documentos = [get_bert_embeddings(doc) for doc in documentos]

df = pd.DataFrame({'Documento': documentos, 'Embeddings': embeddings_documentos})

# Exemplo de uso
consulta = "Como trocar as marchas do meu Googlecar?"
resultados = gerar_e_buscar_consulta(consulta, df)
print(resultados)


def evitar_alucinacoes(texto):
    """Verifica se o texto gerado √© consistente com os documentos na base.
    
    Args:
        texto: O texto gerado pelo modelo de linguagem.
    
    Returns:
        True se o texto for consistente, False caso contr√°rio.
    """
    # Implemente sua l√≥gica de verifica√ß√£o de consist√™ncia aqui.
    # Por exemplo, voc√™ pode comparar o texto gerado com os embeddings
    # dos documentos na base e verificar se h√° similaridade.
    return True  # Substitua por sua l√≥gica de verifica√ß√£o


def ensinar_para_crianca(conceito):
    """Explica o conceito como se estivesse ensinando para uma crian√ßa.
    
    Args:
        conceito: O conceito a ser explicado.
    
    Returns:
        Uma explica√ß√£o simplificada do conceito.
    """
    # Implemente sua l√≥gica de simplifica√ß√£o de conceitos aqui.
    return "Explica√ß√£o simplificada do conceito: " + conceito


def gerar_relatorio_aprendizado(historico_conversa):
    """Gera um relat√≥rio resumindo o aprendizado da conversa.
    
    Args:
        historico_conversa: O hist√≥rico da conversa com o usu√°rio.
    
    Returns:
        Um relat√≥rio de aprendizado.
    """
    # Implemente sua l√≥gica de gera√ß√£o de relat√≥rio aqui.
    return "Relat√≥rio de aprendizado:\n" + historico_conversa


def agendamento_revisao(assunto, data_inicial):
    """Agenda revis√µes do assunto com base na curva de esquecimento.
    
    Args:
        assunto: O assunto a ser revisado.
        data_inicial: A data da primeira revis√£o.
    
    Returns:
        Uma lista de datas de revis√£o.
    """
    # Implemente sua l√≥gica de agendamento de revis√µes aqui.
    return ["Lista de datas de revis√£o para " + assunto]


def fornecer_feedback(resposta_usuario, resposta_correta):
    """Fornece feedback sobre a resposta do usu√°rio.
    
    Args:
        resposta_usuario: A resposta fornecida pelo usu√°rio.
        resposta_correta: A resposta correta.
    
    Returns:
        Um feedback personalizado para o usu√°rio.
    """
    # Implemente sua l√≥gica de feedback aqui.
    if resposta_usuario == resposta_correta:
        return "Parab√©ns, voc√™ acertou!"
    else:
        return "Tente novamente. A resposta correta √©: " + resposta_correta


def simular_personalidade_divertida(texto):
    """Adiciona um toque divertido e analogias ao texto.
    
    Args:
        texto: O texto a ser modificado.
    
    Returns:
        O texto com um toque divertido.
    """
    # Implemente sua l√≥gica para tornar o texto divertido aqui.
    return "üòÅ " + texto + " üöÄ"


def registrar_historico(data, tempo_resposta, capacidade_memorizacao):
    """Registra dados relevantes da intera√ß√£o para an√°lise posterior.
    
    Args:
        data: A data da intera√ß√£o.
        tempo_resposta: O tempo que o usu√°rio levou para responder.
        capacidade_memorizacao: Uma medida da capacidade de memoriza√ß√£o do usu√°rio.
    
    Returns:
        Um registro da intera√ß√£o.
    """
    # Implemente sua l√≥gica de registro de hist√≥rico aqui.
    return {"data": data, "tempo_resposta": tempo_resposta, "capacidade_memorizacao": capacidade_memorizacao}
